import streamlit as st
import tweepy
from textblob import TextBlob
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
import nltk
import re
import qrcode
from io import BytesIO
from PIL import Image
from datetime import datetime, timedelta
import time
import random
import pyttsx3
import base64
import speech_recognition as sr
import threading
from emciones import detectar_emocion

nltk.download('punkt')

# --- CREDENCIALES ---
SPOTIFY_CLIENT_ID = 'a64730f41d9a4b97851f683ed0a6209b'
SPOTIFY_CLIENT_SECRET = 'bfacefaaefa14cdab8f86dc8a37ac69c'
TWITTER_BEARER_TOKEN = [
    "AAAAAAAAAAAAAAAAAAAAAI8l0gEAAAAAhDU8NLwbQ0BbxE8aPNLBv2GQTrY%3Dw5GtzwfYwGBIA01ABfZK6aesqUXtouDtwiDz4IPiK6y52L8m2B",
    "AAAAAAAAAAAAAAAAAAAAAMXI2gEAAAAAQ7YFcY27thZbmxzB3IJqxuch2Po%3DiNZuKn094gpFASHAX42hCOOLMZgbdIzuNERu0eVk8ekCDCKojh",
    "AAAAAAAAAAAAAAAAAAAAAM0v0gEAAAAAno%2FatFXd9ze2bELvHGDy0R0LAYA%3Dy14atlHub78cbGz6Bhx7cK6qMVE82PNUBcIdZO9CIF92aGok9k",
    "AAAAAAAAAAAAAAAAAAAAAEdv0QEAAAAA%2BoxEbgLwfzrneu9E54KbH12qp5M%3Dob5CKvptYRJQh6fRPScDgfVgafwBNDja9hcX1BLetEja9Mja0S",
    "AAAAAAAAAAAAAAAAAAAAAAN72AEAAAAA0OBe%2FC4tgCJ0B8OiAK5hvdF%2FJEg%3DpSrqzEKO4yIbGiD2Z1sopE4w9IdA7pfusNiDJ6ODgjmqBVdD7l",
    "AAAAAAAAAAAAAAAAAAAAANbI2gEAAAAA%2FPLwyvodUcc%2BcjpQnICWi%2F2kkGo%3DtyFBqzg1YT1uF3LNuiU24cTtns9sV9dx3xchaE4trrl6PzloOe"
]

# --- AUTENTICACI√ìN ---
sp = spotipy.Spotify(auth_manager=SpotifyClientCredentials(
    client_id=SPOTIFY_CLIENT_ID,
    client_secret=SPOTIFY_CLIENT_SECRET
))
# --- FUNCI√ìN PARA ROTAR CLIENTE TWITTER ---
def get_twitter_client():
    for token in TWITTER_BEARER_TOKEN:
        try:
            client = tweepy.Client(bearer_token=token)
            client.get_user(username="Twitter")  # Test silencioso
            return client
        except tweepy.TooManyRequests:
            continue
        except Exception:
            continue
    return None

# --- CLIENTE DE TWITTER FUNCIONAL ---
twitter_client = get_twitter_client()

# --- FUNCIONES ---
def decir(texto):
    engine = pyttsx3.init()
    engine.setProperty('rate', 150)  # Velocidad de habla
    engine.setProperty('volume', 1.0)  # Volumen (0.0 a 1.0)
    engine.say(texto)
    engine.runAndWait()

def limpiar_texto(texto):
    texto = re.sub(r"http\S+", "", texto)          # quitar URLs
    texto = re.sub(r"@\w+", "", texto)             # quitar menciones
    texto = re.sub(r"[^a-zA-Z√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë\s]", "", texto)  # quitar emojis y s√≠mbolos
    return texto.lower().strip()


def emocion_a_genero(emocion):
    return {
        'euforia': 'electronic',
        'entusiasmo': 'dance',
        'alegr√≠a': 'pop',
        'serenidad': 'classical',
        'neutral': 'chill',
        'melancol√≠a': 'jazz',
        'tristeza': 'acoustic',
        'enojo': 'metal',
        'frustraci√≥n': 'grunge',
        'amor': 'romantic',
        'celos': 'blues',
        'envidia': 'hip-hop',
        'indefinida': 'world'
    }.get(emocion, 'pop')


def buscar_artista(texto):
    palabras = texto.split()
    posibles_nombres = [p for p in palabras if p.istitle()]
    if not posibles_nombres:
        return None
    artista = posibles_nombres[0]
    try:
        time.sleep(1)
        resultados = sp.search(q=artista, type='artist', limit=1)
        if resultados and resultados.get('artists') and resultados['artists']['items']:
            return resultados['artists']['items'][0]['name']
    except spotipy.exceptions.SpotifyException as e:
        if e.http_status == 429:
            st.error("Spotify est√° rechazando demasiadas solicitudes. Intenta m√°s tarde.")
            return None
    return None

def recomendar_playlist_personalizada(emocion, texto):
    artista = buscar_artista(texto)
    
    if emocion == "amor" and artista:
        q = f"{artista} amor"
    else:
        genero = emocion_a_genero(emocion)
        q = f"{genero} mood"

    try:
        time.sleep(1)
        resultados = sp.search(q=q, type='playlist', limit=10)
        playlists = resultados.get('playlists', {}).get('items', [])
        urls = [
            p.get('external_urls', {}).get('spotify')
            for p in playlists if p and 'spotify' in p.get('external_urls', {})
        ]
        return random.choice(urls) if urls else None
    except spotipy.exceptions.SpotifyException as e:
        if e.http_status == 429:
            st.error("‚ö†Ô∏è L√≠mite de solicitudes alcanzado en Spotify. Intenta de nuevo en unos segundos.")
        else:
            st.error(f"Error con Spotify: {str(e)}")
    except Exception as e:
        st.error(f"Error inesperado: {str(e)}")
    return None


def obtener_tweet(usuario):
    try:
        user = twitter_client.get_user(username=usuario)
        tweets = twitter_client.get_users_tweets(id=user.data.id, max_results=5, exclude=['retweets', 'replies'])
        return tweets.data[0].text if tweets.data else "No se encontr√≥ ning√∫n tweet reciente."
    except tweepy.TooManyRequests:
        hora_reintento = datetime.now() + timedelta(minutes=15)
        return f"‚ö†Ô∏è Has hecho muchas solicitudes. Intenta de nuevo a las {hora_reintento.strftime('%H:%M:%S')}"
    except Exception as e:
        return f"Error: {str(e)}"


def generar_qr_url(url):
    img = qrcode.make(url)
    buf = BytesIO()
    img.save(buf)
    buf.seek(0)
    return Image.open(buf)

def escuchar_voz():
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        decir("Estoy escuchando. Dime c√≥mo te sientes.")
        st.info("üéôÔ∏è Esperando tu voz... habla ahora.")
        audio = recognizer.listen(source)

    try:
        texto = recognizer.recognize_google(audio, language="es-ES")
        st.success(f"üîä Has dicho: {texto}")
        return texto
    except sr.UnknownValueError:
        st.warning("No entend√≠ lo que dijiste.")
        decir("Lo siento, no entend√≠ lo que dijiste.")
    except sr.RequestError:
        st.error("No se pudo conectar al servicio de reconocimiento de voz.")
        decir("No se pudo conectar al servicio de reconocimiento de voz.")
    
    return ""


# --- INTERFAZ STREAMLIT ---
st.title("üéß Emocify")

# Fondo con imagen
def set_background_image(image_file):
    with open(image_file, "rb") as f:
        data = f.read()
    encoded = base64.b64encode(data).decode()
    css = f"""
    <style>
    .stApp {{
        background-image: url("data:image/png;base64,{encoded}");
        background-size: cover;
        background-position: center;
        background-attachment: fixed;
    }}
    </style>
    """
    st.markdown(css, unsafe_allow_html=True)

set_background_image("C:/Users/alexc/Downloads/Necesitas ayuda Habla con Urissa, nuestra aitente virtual! 1.png") # Aseg√∫rate que exista esta imagen

# Estilo para widgets
st.markdown(
    """
    <style>
    .stTextInput, .stTextArea, .stSelectbox, .stButton {
        background-color: rgba(255, 255, 255, 0.85);
        border-radius: 10px;
        padding: 0.5em;
        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);
    }
    </style>
    """,
    unsafe_allow_html=True
)

# Bot√≥n para activar el asistente de voz Urissa
if st.button("Activar Asistente Urissa"):
    intro = (
        "¬°Hola! Soy Urissa, tu asistente de emociones y m√∫sica. "
        "Esta aplicaci√≥n te ayuda a detectar emociones en textos de Twitter o que t√∫ escribas, "
        "y te recomienda playlists en Spotify para mejorar tu estado de √°nimo. "
        "Puedes ingresar un usuario de Twitter para analizar su √∫ltimo tweet, o escribir un texto manualmente. "
        "Luego te dir√© cu√°l es la emoci√≥n detectada y te dar√© una playlist para que la escuches. "
        "¬°Vamos a empezar!"
    )
    decir(intro)
    st.info("Urissa ha comenzado a guiarte por la app con voz.")

# Selecci√≥n de fuente del texto
opcion = st.radio("¬øDesde d√≥nde quieres analizar el texto?", ("Twitter", "Facebook (manual)"))

# Bot√≥n para pedir ayuda a Urissa seg√∫n la opci√≥n elegida
if st.button("Pedir ayuda a Urissa"):
    if opcion == "Twitter":
        ayuda_twitter = (
            "Has elegido analizar un tweet de Twitter. "
            "Por favor, ingresa el nombre del usuario sin la arroba y luego presiona 'Analizar y recomendar'."
        )
        decir(ayuda_twitter)
        st.info(ayuda_twitter)
    else:
        ayuda_manual = (
            "Has elegido analizar un texto manualmente. "
            "Pega o escribe el texto en el √°rea que aparece y luego presiona 'Analizar manual'."
        )
        decir(ayuda_manual)
        st.info(ayuda_manual)

# Flujo para opci√≥n Twitter
if opcion == "Twitter":
    usuario = st.text_input("Ingresa el nombre de usuario de Twitter (sin @):")
    
    if st.button("Analizar y recomendar"):
        st.info("Obteniendo tweet...")
        decir("Obteniendo tweet del usuario.")
        tweet = obtener_tweet(usuario)

        if tweet.startswith("Error") or tweet.startswith("‚ö†Ô∏è"):
            st.error(tweet)
            decir("Hubo un problema al obtener el tweet. Por favor intenta m√°s tarde o revisa el usuario.")
        else:
            st.success("Tweet obtenido correctamente.")
            texto = limpiar_texto(tweet)
            emocion = detectar_emocion(texto)
            url = recomendar_playlist_personalizada(emocion, texto)

            st.markdown(f"**Texto original:** {tweet}")
            st.markdown(f"**Emoci√≥n detectada:** {emocion}")
            decir(f"Detectamos la emoci√≥n {emocion}. Aqu√≠ tienes una playlist recomendada.")

            if url:
                st.markdown(f"[üéß Escuchar playlist recomendada]({url})")
                st.image(generar_qr_url(url), caption="Escanea el QR para abrir la playlist")
            else:
                st.warning("No se pudo generar la playlist para este texto.")
                decir("Lo siento, no pude generar una playlist para este texto.")

# Flujo para texto manual
else:
    texto_manual = st.text_area("Pega aqu√≠ tu texto:")
    if st.button("Analizar manual"):
        if not texto_manual.strip():
            st.warning("Por favor, ingresa alg√∫n texto para analizar.")
            decir("Por favor, ingresa alg√∫n texto para analizar.")
        else:
            st.info("Analizando texto...")
            decir("Analizando el texto que ingresaste.")
            texto = limpiar_texto(texto_manual)
            emocion = detectar_emocion(texto)
            url = recomendar_playlist_personalizada(emocion, texto)

            st.markdown(f"**Emoci√≥n detectada:** {emocion}")
            decir(f"Detectamos la emoci√≥n {emocion}. Aqu√≠ tienes una playlist recomendada.")

            if url:
                st.markdown(f"[üéß Escuchar playlist recomendada]({url})")
                st.image(generar_qr_url(url), caption="Escanea el QR para abrir la playlist")
            else:
                st.warning("No se pudo generar la playlist para este texto.")
                decir("No pude generar una playlist para este texto.")

# --- FLUJO POR VOZ ---
st.markdown("---")
st.header("üó£Ô∏è Dime c√≥mo te sientes")

# Funci√≥n para escuchar por micr√≥fono
def escuchar_voz():
    import speech_recognition as sr
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        decir("Estoy escuchando. Dime c√≥mo te sientes.")
        st.info("üéôÔ∏è Esperando tu voz... habla ahora.")
        audio = recognizer.listen(source)

    try:
        texto = recognizer.recognize_google(audio, language="es-ES")
        st.success(f"üîä Has dicho: {texto}")
        return texto
    except sr.UnknownValueError:
        st.warning("No entend√≠ lo que dijiste.")
        decir("Lo siento, no entend√≠ lo que dijiste.")
    except sr.RequestError:
        st.error("No se pudo conectar al servicio de reconocimiento de voz.")
        decir("No se pudo conectar al servicio de reconocimiento de voz.")
    return ""

# Bot√≥n para activar micr√≥fono
if st.button("üéôÔ∏è Hablar ahora"):
    texto_voz = escuchar_voz()
    if texto_voz:
        texto = limpiar_texto(texto_voz)
        emocion = detectar_emocion(texto)
        url = recomendar_playlist_personalizada(emocion, texto)

        # Mensaje emp√°tico seg√∫n emoci√≥n
        respuestas = {
            'alegr√≠a': "¬°Qu√© gusto saber que est√°s feliz!",
            'tristeza': "Lo siento mucho. Aqu√≠ hay m√∫sica que podr√≠a ayudarte.",
            'amor': "¬°El amor es hermoso!",
            'enojo': "Respira profundo, la m√∫sica puede ayudarte a calmarte.",
            'frustraci√≥n': "S√© que es dif√≠cil. Escucha esto, puede levantar tu √°nimo.",
            'euforia': "¬°Wow, qu√© emoci√≥n! Celebra con esta m√∫sica.",
            'melancol√≠a': "Los recuerdos a veces duelen. Esta m√∫sica puede acompa√±arte.",
            'serenidad': "Qu√© bonito sentirse en paz. Aqu√≠ tienes algo tranquilo.",
            'sorpresa': "¬°Qu√© inesperado! Acomp√°√±alo con buena m√∫sica.",
            'gratitud': "La gratitud es poderosa. Te dejo algo especial.",
            'esperanza': "Nunca pierdas la fe. Esta playlist es para ti.",
            'miedo': "No est√°s solo. Esta m√∫sica puede reconfortarte.",
            'celos': "Es normal sentir eso a veces. Aqu√≠ tienes m√∫sica para despejarte.",
            'envidia': "Recuerda que cada uno tiene su momento. Escucha esto.",
            'orgullo': "¬°Felicidades por tu logro!",
            'verg√ºenza': "Todos cometemos errores. Esta m√∫sica puede ayudarte.",
            'neutral': "Aqu√≠ tienes algo relajado para acompa√±arte.",
        }

        mensaje = respuestas.get(emocion, "Aqu√≠ tienes algo para acompa√±ar tu estado de √°nimo.")
        st.markdown(f"**Emoci√≥n detectada:** {emocion}")
        decir(f"{mensaje} Te recomiendo esta playlist.")

        if url:
            st.markdown(f"[üéß Escuchar playlist recomendada]({url})")
            st.image(generar_qr_url(url), caption="Escanea el QR para abrir la playlist")
        else:
            st.warning("No se pudo generar la playlist para este texto.")
            decir("No pude generar una playlist para este texto.")
